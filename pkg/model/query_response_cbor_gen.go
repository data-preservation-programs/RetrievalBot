// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *QueryResponse) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{161}); err != nil {
		return err
	}

	// t.Protocols ([]model.Protocol) (slice)
	if len("Protocols") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Protocols\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Protocols"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Protocols")); err != nil {
		return err
	}

	if len(t.Protocols) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Protocols was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Protocols))); err != nil {
		return err
	}
	for _, v := range t.Protocols {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *QueryResponse) UnmarshalCBOR(r io.Reader) (err error) {
	*t = QueryResponse{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("QueryResponse: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Protocols ([]model.Protocol) (slice)
		case "Protocols":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Protocols: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Protocols = make([]Protocol, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v Protocol
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.Protocols[i] = v
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
